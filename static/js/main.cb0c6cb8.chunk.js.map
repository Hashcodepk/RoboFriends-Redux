{"version":3,"sources":["serviceWorker.js","reducers.js","components/Card.js","components/CardList.js","components/Logo.js","components/SearchBox.js","components/ErrorBoundry.js","components/Scroll.js","containers/App.js","actions.js","constants.js","index.js"],"names":["Boolean","window","location","hostname","match","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","map","user","i","components_Card","key","Logo","renderprops","from","opacity","to","config","duration","delay","props","style","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","children","Component","Scroll","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","src_components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","disptach","fetch","then","response","json","data","catch","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb0c6cb8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n } from './constants.js'\r\n\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots:action.payload, isPending:false })\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error:action.payload, isPending:false })\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\n\r\n\r\nconst Card = ({id , name , email}) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt=\"Robots\" src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h3>{name}</h3>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\trobots.map((user, i) => {\r\n\t\t\treturn <Card \r\n\t\t\tkey={robots[i].id} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}/>\r\n\t\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\nimport { Spring } from 'react-spring/renderprops'\r\n\r\nexport default function Logo(){\r\n\treturn(\r\n\t\t<Spring\r\n\t\t\tfrom={{ opacity: 0}}\r\n\t\t\tto={{ opacity: 1}}\r\n\t\t\tconfig={{duration: 2000, delay: 300}}\r\n\t\t>\r\n\t\t\t{props => (\r\n\t\t<div style={props}>\r\n\t\t\t<h1 className='f1'>RoboFriends</h1>\t\r\n\t\t</div>\r\n\t)}\r\n\t\t</Spring>\r\n\t\t);\r\n}\r\n\r\n","import React from 'react';\r\n\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn(\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input \r\n\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue tc\"\r\n\t\t\ttype=\"search\"\r\n\t\t\tplaceholder=\"search robots\"\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false \r\n\t\t}\r\n\t}\r\n\r\n\r\ncomponentDidCatch(error, info ) {\r\n\tthis.setState({hasError: true})\r\n}\r\n\r\nrender() {\r\n\tif(this.state.hasError) {\r\n\t\treturn <h1> Oooops. This is not Good</h1>\r\n\t}\r\n\treturn this.props.children\r\n}\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport './Scroll.css'\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div className='abc'>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport CardList from '../components/CardList';\r\nimport Logo from '../components/Logo';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Scroll from '../components/Scroll'\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\t\tsearchField: state.searchRobots.searchField,\r\n\t\t\trobots: state.requestRobots.robots,\r\n\t\t\tisPending: state.requestRobots.isPending,\r\n\t\t\terror: state.requestRobots.error\t\t\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\t// console.log(this.props.store.getState());\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\treturn isPending\r\n\t\t\t? <h1 className=\"tc f1\">LOADING...</h1>\r\n\t\t : \r\n\t\t(\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<Logo/>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t); \r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n } from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})   \r\n\r\nexport const requestRobots = () => (disptach) => {\r\n\tdisptach({ type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=> response.json())\r\n\t.then(data => disptach({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t.catch(error => disptach({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n// import { createLogger } from 'redux-logger';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport App from './containers/App';\nimport thunkMiddleware from 'redux-thunk';\n\n// const logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n\t\t\t<Provider store={store}>\n\t\t\t\t<App />\n\t\t\t</Provider> \n\t\t\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}